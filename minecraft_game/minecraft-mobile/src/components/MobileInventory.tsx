// –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π drag&drop
import React, { useState, useRef } from 'react';
import { InventorySlot, Recipe } from '@/types/game';
import { gameData } from '@/lib/gameData';

interface MobileInventoryProps {
  isOpen: boolean;
  inventory: InventorySlot[];
  hotbar: InventorySlot[];
  onInventoryChange: (newInventory: InventorySlot[]) => void;
  onHotbarChange: (newHotbar: InventorySlot[]) => void;
  onClose: () => void;
}

export function MobileInventory({ 
  isOpen, 
  inventory, 
  hotbar, 
  onInventoryChange, 
  onHotbarChange, 
  onClose 
}: MobileInventoryProps) {
  const [activeTab, setActiveTab] = useState<'inventory' | 'crafting'>('inventory');
  const [selectedSlot, setSelectedSlot] = useState<{type: 'inventory' | 'hotbar' | 'crafting', index: number} | null>(null);
  const [craftingGrid, setCraftingGrid] = useState<InventorySlot[]>(Array(9).fill({ itemId: null, count: 0 }));
  const [draggedItem, setDraggedItem] = useState<{ slot: InventorySlot, source: { type: string, index: number } } | null>(null);

  if (!isOpen) return null;

  const getItemIcon = (slot: InventorySlot) => {
    if (!slot.itemId) return null;
    const item = gameData.getItem(slot.itemId) || gameData.getBlock(slot.itemId);
    if (!item) return '?';
    
    const iconMap: Record<string, string> = {
      'dirt': 'üüß',
      'stone': '‚ö´',
      'grass_block': 'üåø',
      'wood_log': 'ü™µ',
      'oak_log': 'ü™µ',
      'sand': 'üü°',
      'cobblestone': '‚ö´',
      'oak_planks': 'üü¶',
      'glass': 'üî∫',
      'coal_ore': '‚ö´',
      'iron_ore': 'üîò',
      'diamond_ore': 'üíé',
      'crafting_table': 'ü™µ',
      'furnace': 'üî•',
      'chest': 'üì¶',
      'torch': 'üïØÔ∏è',
      'water': 'üåä',
      'wooden_pickaxe': '‚õèÔ∏è',
      'stone_pickaxe': '‚õèÔ∏è',
      'iron_pickaxe': '‚õèÔ∏è',
      'wooden_axe': 'ü™ì',
      'wooden_shovel': 'ü•Ñ',
      'wooden_sword': '‚öîÔ∏è',
      'stick': 'üå≥',
      'coal': '‚ö´',
      'iron_ingot': 'üí∞',
      'diamond': 'üíé'
    };
    
    return iconMap[slot.itemId] || 'üìé';
  };

  const handleSlotClick = (slot: InventorySlot, type: 'inventory' | 'hotbar' | 'crafting', index: number) => {
    if (!slot.itemId) return;
    
    if (selectedSlot && selectedSlot.type !== 'crafting' && type !== 'crafting') {
      // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –º–µ–∂–¥—É —Å–ª–æ—Ç–∞–º–∏
      swapSlots(selectedSlot, { type, index });
      setSelectedSlot(null);
    } else {
      setSelectedSlot({ type, index });
    }
  };

  const swapSlots = (from: {type: string, index: number}, to: {type: string, index: number}) => {
    const fromArray = from.type === 'hotbar' ? hotbar : inventory;
    const toArray = to.type === 'hotbar' ? hotbar : inventory;
    
    const fromItem = { ...fromArray[from.index] };
    const toItem = { ...toArray[to.index] };
    
    const newFromArray = [...fromArray];
    const newToArray = [...toArray];
    
    newFromArray[from.index] = toItem;
    newToArray[to.index] = fromItem;
    
    if (from.type === 'hotbar') {
      onHotbarChange(newFromArray);
    } else {
      onInventoryChange(newFromArray);
    }
    
    if (to.type === 'hotbar' && from.type !== 'hotbar') {
      onHotbarChange(newToArray);
    } else if (to.type === 'inventory' && from.type !== 'inventory') {
      onInventoryChange(newToArray);
    }
  };

  const findCraftingRecipe = (): Recipe | null => {
    const recipes = gameData.getAllRecipes();
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ 2x2 —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
    const craftingPattern = [
      craftingGrid[0].itemId || '',
      craftingGrid[1].itemId || '',
      craftingGrid[3].itemId || '',
      craftingGrid[4].itemId || ''
    ];
    
    return recipes.find(recipe => {
      if (recipe.type === 'shapeless') {
        // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –±–µ—Å—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
        const ingredients = recipe.ingredients || [];
        const craftingItems = craftingGrid.filter(slot => slot.itemId).map(slot => slot.itemId);
        return ingredients.length === craftingItems.length && 
               ingredients.every(ing => craftingItems.includes(ing));
      }
      return false;
    }) || null;
  };

  const executeCrafting = () => {
    const recipe = findCraftingRecipe();
    if (!recipe) return;
    
    // –£–¥–∞–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ —Å–µ—Ç–∫–∏ –∫—Ä–∞—Ñ—Ç–∞
    const newCraftingGrid = craftingGrid.map(slot => {
      if (slot.itemId && slot.count > 1) {
        return { ...slot, count: slot.count - 1 };
      }
      return { itemId: null, count: 0 };
    });
    
    setCraftingGrid(newCraftingGrid);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    const newInventory = [...inventory];
    const resultItem = recipe.result;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç –∏–ª–∏ —Å–ª–æ—Ç —Å —Ç–µ–º –∂–µ –ø—Ä–µ–¥–º–µ—Ç–æ–º
    const emptySlotIndex = newInventory.findIndex(slot => 
      !slot.itemId || (slot.itemId === resultItem.item && slot.count + resultItem.count <= 64)
    );
    
    if (emptySlotIndex !== -1) {
      if (!newInventory[emptySlotIndex].itemId) {
        newInventory[emptySlotIndex] = { itemId: resultItem.item, count: resultItem.count };
      } else {
        newInventory[emptySlotIndex].count += resultItem.count;
      }
      onInventoryChange(newInventory);
    }
  };

  const renderSlot = (slot: InventorySlot, type: 'inventory' | 'hotbar' | 'crafting', index: number) => {
    const isSelected = selectedSlot?.type === type && selectedSlot?.index === index;
    
    return (
      <button
        key={`${type}-${index}`}
        className={`w-12 h-12 border-2 rounded-lg flex flex-col items-center justify-center relative transition-all ${
          isSelected 
            ? 'border-yellow-400 bg-yellow-400/20 scale-105' 
            : 'border-gray-600 bg-gray-800/50 hover:border-gray-400'
        }`}
        onClick={() => handleSlotClick(slot, type, index)}
      >
        {slot.itemId && (
          <>
            <div className="text-lg">{getItemIcon(slot)}</div>
            {slot.count > 1 && (
              <div className="absolute bottom-0 right-0 text-xs text-white bg-gray-900 rounded-full w-4 h-4 flex items-center justify-center">
                {slot.count > 99 ? '99+' : slot.count}
              </div>
            )}
            {slot.durability !== undefined && slot.durability < 100 && (
              <div 
                className="absolute bottom-0 left-0 right-0 h-1 bg-red-500 rounded-b"
                style={{ width: `${slot.durability}%` }}
              />
            )}
          </>
        )}
      </button>
    );
  };

  return (
    <div className="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-gray-900 rounded-xl border-2 border-gray-700 w-full max-w-md max-h-[90vh] overflow-hidden">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex justify-between items-center p-4 border-b border-gray-700">
          <h2 className="text-xl font-bold text-white">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</h2>
          <button 
            onClick={onClose}
            className="text-gray-400 hover:text-white text-2xl p-1"
          >
            √ó
          </button>
        </div>
        
        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="flex border-b border-gray-700">
          <button
            className={`flex-1 py-3 px-4 text-sm font-medium ${
              activeTab === 'inventory' ? 'text-white bg-gray-800' : 'text-gray-400 hover:text-white'
            }`}
            onClick={() => setActiveTab('inventory')}
          >
            üéí –ü—Ä–µ–¥–º–µ—Ç—ã
          </button>
          <button
            className={`flex-1 py-3 px-4 text-sm font-medium ${
              activeTab === 'crafting' ? 'text-white bg-gray-800' : 'text-gray-400 hover:text-white'
            }`}
            onClick={() => setActiveTab('crafting')}
          >
            ‚öôÔ∏è –ö—Ä–∞—Ñ—Ç
          </button>
        </div>
        
        <div className="overflow-y-auto" style={{ maxHeight: 'calc(90vh - 140px)' }}>
          {activeTab === 'inventory' && (
            <div className="p-4 space-y-4">
              {/* –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ */}
              <div>
                <h3 className="text-white text-sm font-medium mb-2">–ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:</h3>
                <div className="grid grid-cols-9 gap-1">
                  {hotbar.map((slot, index) => renderSlot(slot, 'hotbar', index))}
                </div>
              </div>
              
              {/* –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å */}
              <div>
                <h3 className="text-white text-sm font-medium mb-2">–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:</h3>
                <div className="grid grid-cols-9 gap-1">
                  {inventory.map((slot, index) => renderSlot(slot, 'inventory', index))}
                </div>
              </div>
            </div>
          )}
          
          {activeTab === 'crafting' && (
            <div className="p-4 space-y-4">
              {/* –°–µ—Ç–∫–∞ –∫—Ä–∞—Ñ—Ç–∞ 2x2 */}
              <div>
                <h3 className="text-white text-sm font-medium mb-2">–ö—Ä–∞—Ñ—Ç–∏–Ω–≥ (2x2):</h3>
                <div className="flex items-center gap-4">
                  <div className="grid grid-cols-3 gap-1 p-3 bg-gray-800 rounded-lg">
                    {craftingGrid.slice(0, 9).map((slot, index) => (
                      <button
                        key={index}
                        className={`w-12 h-12 border-2 rounded-lg flex items-center justify-center relative ${
                          (index < 2 || (index >= 3 && index < 5)) ? 'border-gray-500 bg-gray-700' : 'border-gray-700 bg-gray-800'
                        }`}
                        onClick={() => {
                          if (selectedSlot && selectedSlot.type !== 'crafting') {
                            const sourceArray = selectedSlot.type === 'hotbar' ? hotbar : inventory;
                            const sourceItem = sourceArray[selectedSlot.index];
                            
                            if (sourceItem.itemId) {
                              const newCraftingGrid = [...craftingGrid];
                              newCraftingGrid[index] = { itemId: sourceItem.itemId, count: 1 };
                              setCraftingGrid(newCraftingGrid);
                              
                              // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                              const newSourceArray = [...sourceArray];
                              if (newSourceArray[selectedSlot.index].count > 1) {
                                newSourceArray[selectedSlot.index].count--;
                              } else {
                                newSourceArray[selectedSlot.index] = { itemId: null, count: 0 };
                              }
                              
                              if (selectedSlot.type === 'hotbar') {
                                onHotbarChange(newSourceArray);
                              } else {
                                onInventoryChange(newSourceArray);
                              }
                              setSelectedSlot(null);
                            }
                          }
                        }}
                        disabled={!(index < 2 || (index >= 3 && index < 5))}
                      >
                        {slot.itemId && (index < 2 || (index >= 3 && index < 5)) && (
                          <div className="text-lg">{getItemIcon(slot)}</div>
                        )}
                      </button>
                    ))}
                  </div>
                  
                  <div className="text-white text-2xl">‚Üí</div>
                  
                  {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
                  <div className="w-12 h-12 border-2 border-green-500 bg-green-500/20 rounded-lg flex items-center justify-center">
                    {(() => {
                      const recipe = findCraftingRecipe();
                      return recipe ? getItemIcon({ itemId: recipe.result.item, count: recipe.result.count }) : null;
                    })()}
                  </div>
                </div>
                
                {/* –ö–Ω–æ–ø–∫–∞ –∫—Ä–∞—Ñ—Ç–∞ */}
                <button
                  onClick={executeCrafting}
                  disabled={!findCraftingRecipe()}
                  className={`w-full py-2 px-4 rounded-lg font-medium transition-colors ${
                    findCraftingRecipe() 
                      ? 'bg-green-600 hover:bg-green-500 text-white' 
                      : 'bg-gray-600 text-gray-400 cursor-not-allowed'
                  }`}
                >
                  {findCraftingRecipe() ? '–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å' : '–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞'}
                </button>
              </div>
              
              {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã */}
              <div>
                <h3 className="text-white text-sm font-medium mb-2">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:</h3>
                <div className="grid grid-cols-2 gap-2 text-xs">
                  <div className="bg-gray-800 p-2 rounded">
                    <div className="text-white font-medium">–î–æ—Å–∫–∏</div>
                    <div className="text-gray-400">1x –ë—Ä–µ–≤–Ω–æ ‚Üí 4x –î–æ—Å–∫–∏</div>
                  </div>
                  <div className="bg-gray-800 p-2 rounded">
                    <div className="text-white font-medium">–ü–∞–ª–∫–∏</div>
                    <div className="text-gray-400">2x –î–æ—Å–∫–∏ ‚Üí 4x –ü–∞–ª–∫–∏</div>
                  </div>
                  <div className="bg-gray-800 p-2 rounded">
                    <div className="text-white font-medium">–í–µ—Ä—Å—Ç–∞–∫</div>
                    <div className="text-gray-400">4x –î–æ—Å–∫–∏ ‚Üí –í–µ—Ä—Å—Ç–∞–∫</div>
                  </div>
                  <div className="bg-gray-800 p-2 rounded">
                    <div className="text-white font-medium">–§–∞–∫–µ–ª</div>
                    <div className="text-gray-400">1x –£–≥–æ–ª—å + 1x –ü–∞–ª–∫–∞</div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}