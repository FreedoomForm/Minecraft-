// 3D –º–æ–≤–∏–º–µ–Ω—Ç –¥–ª—è Minecraft —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
import React, { useRef, useEffect, useState, useCallback, Suspense } from 'react';
import { Canvas, useFrame, useThree } from '@react-three/fiber';
import { Sphere, Box } from '@react-three/drei';
import * as THREE from 'three';
import { WorldChunk, TouchControls, PlayerState } from '@/types/game';
import { WorldGenerator } from '@/lib/worldGenerator';
import { gameData } from '@/lib/gameData';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è 3D —Å—Ü–µ–Ω—ã
function LoadingFallback() {
  return (
    <div className="absolute inset-0 flex items-center justify-center bg-gray-900 text-white">
      <div className="text-center">
        <div className="text-2xl mb-4">üéÆ</div>
        <div className="text-lg">–ó–∞–≥—Ä—É–∑–∫–∞ 3D –º–∏—Ä–∞...</div>
      </div>
    </div>
  );
}

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫–∞
function Block({ position, blockType, onClick }: {
  position: [number, number, number];
  blockType: string;
  onClick?: () => void;
}) {
  const meshRef = useRef<THREE.Mesh>(null);
  const [hovered, setHovered] = useState(false);
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –±–ª–æ–∫–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç gameData
  const getBlockColor = (type: string): string => {
    const colorMap: Record<string, string> = {
      'grass_block': '#4a9c4a',
      'dirt': '#8b4513',
      'stone': '#808080',
      'sand': '#f4e4bc',
      'water': '#1e90ff',
      'wood_log': '#8B4513',
      'oak_log': '#8B4513',
      'oak_planks': '#deb887',
      'cobblestone': '#696969',
      'coal_ore': '#2f2f2f',
      'iron_ore': '#cd853f',
      'diamond_ore': '#87ceeb',
      'glass': '#e0f6ff',
      'leaves': '#228b22',
      'oak_leaves': '#228b22'
    };
    return colorMap[type] || '#ffffff';
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–ª–æ–∫ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
  const isTransparent = ['water', 'glass'].includes(blockType);

  return (
    <Box
      ref={meshRef}
      position={position}
      args={[1, 1, 1]}
      onClick={onClick}
      onPointerOver={() => setHovered(true)}
      onPointerOut={() => setHovered(false)}
    >
      <meshBasicMaterial 
        color={hovered ? '#ffff00' : getBlockColor(blockType)}
        transparent={isTransparent}
        opacity={isTransparent ? 0.7 : 1.0}
      />
    </Box>
  );
}

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞
function DemoChunk({ onBlockClick }: {
  onBlockClick: (x: number, y: number, z: number) => void;
}) {
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —á–∞–Ω–∫ —Å –±–∞–∑–æ–≤—ã–º–∏ –±–ª–æ–∫–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const blocks: JSX.Element[] = [];
  
  // –î–µ–º–æ-–ª–∞–Ω–¥—à–∞—Ñ—Ç
  for (let x = -5; x <= 5; x++) {
    for (let z = -5; z <= 5; z++) {
      // –ë–∞–∑–æ–≤–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
      blocks.push(
        <Block
          key={`ground-${x}-0-${z}`}
          position={[x, 0, z]}
          blockType="grass_block"
          onClick={() => onBlockClick(x, 0, z)}
        />
      );
      
      // –ü–æ–¥–∑–µ–º–Ω—ã–µ —Å–ª–æ–∏
      for (let y = -1; y >= -3; y--) {
        blocks.push(
          <Block
            key={`underground-${x}-${y}-${z}`}
            position={[x, y, z]}
            blockType={y === -1 ? "dirt" : "stone"}
            onClick={() => onBlockClick(x, y, z)}
          />
        );
      }
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–º–æ-–æ–±—ä–µ–∫—Ç–æ–≤
  blocks.push(
    <Block key="tree-base" position={[3, 1, 3]} blockType="oak_log" onClick={() => onBlockClick(3, 1, 3)} />,
    <Block key="tree-mid" position={[3, 2, 3]} blockType="oak_log" onClick={() => onBlockClick(3, 2, 3)} />,
    <Block key="tree-top" position={[3, 3, 3]} blockType="oak_log" onClick={() => onBlockClick(3, 3, 3)} />,
    <Block key="leaf1" position={[2, 3, 3]} blockType="leaves" onClick={() => onBlockClick(2, 3, 3)} />,
    <Block key="leaf2" position={[3, 4, 3]} blockType="leaves" onClick={() => onBlockClick(3, 4, 3)} />,
    <Block key="leaf3" position={[4, 3, 3]} blockType="leaves" onClick={() => onBlockClick(4, 3, 3)} />,
    <Block key="leaf4" position={[3, 3, 2]} blockType="leaves" onClick={() => onBlockClick(3, 3, 2)} />,
    <Block key="leaf5" position={[3, 3, 4]} blockType="leaves" onClick={() => onBlockClick(3, 3, 4)} />
  );
  
  // –í–æ–¥–æ–µ–º
  blocks.push(
    <Block key="water1" position={[-3, 0, -3]} blockType="water" onClick={() => onBlockClick(-3, 0, -3)} />,
    <Block key="water2" position={[-3, 0, -2]} blockType="water" onClick={() => onBlockClick(-3, 0, -2)} />,
    <Block key="water3" position={[-2, 0, -3]} blockType="water" onClick={() => onBlockClick(-2, 0, -3)} />,
    <Block key="water4" position={[-2, 0, -2]} blockType="water" onClick={() => onBlockClick(-2, 0, -2)} />
  );

  return <>{blocks}</>;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä–æ–∫–∞
function Player({ position }: { position: [number, number, number] }) {
  return (
    <group position={[position[0], position[1] + 0.9, position[2]]}>
      {/* –ì–æ–ª–æ–≤–∞ */}
      <Box args={[0.6, 0.6, 0.6]} position={[0, 0.3, 0]}>
        <meshBasicMaterial color="#ffdbac" />
      </Box>
      
      {/* –¢–µ–ª–æ */}
      <Box args={[0.6, 1.2, 0.3]} position={[0, -0.6, 0]}>
        <meshBasicMaterial color="#0066cc" />
      </Box>
      
      {/* –†—É–∫–∏ */}
      <Box args={[0.3, 1.2, 0.3]} position={[-0.45, -0.6, 0]}>
        <meshBasicMaterial color="#ffdbac" />
      </Box>
      <Box args={[0.3, 1.2, 0.3]} position={[0.45, -0.6, 0]}>
        <meshBasicMaterial color="#ffdbac" />
      </Box>
      
      {/* –ù–æ–≥–∏ */}
      <Box args={[0.3, 1.2, 0.3]} position={[-0.15, -1.8, 0]}>
        <meshBasicMaterial color="#333333" />
      </Box>
      <Box args={[0.3, 1.2, 0.3]} position={[0.15, -1.8, 0]}>
        <meshBasicMaterial color="#333333" />
      </Box>
    </group>
  );
}

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞–º–µ—Ä—ã
function CameraController({ 
  controls, 
  playerPosition,
  onCameraChange
}: { 
  controls: TouchControls;
  playerPosition: [number, number, number];
  onCameraChange: (rotation: [number, number]) => void;
}) {
  const { camera } = useThree();
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  useFrame(() => {
    try {
      // –ü–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã (–Ω–µ–º–Ω–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞–µ–º –∏ –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –≤—ã—à–µ –¥–ª—è –æ–±–∑–æ—Ä–∞)
      camera.position.set(
        playerPosition[0] - 5,
        playerPosition[1] + 8,
        playerPosition[2] + 5
      );
      
      // –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É –≤ —Ü–µ–Ω—Ç—Ä —Å—Ü–µ–Ω—ã
      camera.lookAt(playerPosition[0], playerPosition[1], playerPosition[2]);
      
      // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      onCameraChange([Math.PI * -0.25, Math.PI * 0.25]);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã:', error);
    }
  });

  return null;
}

interface MinecraftEngineProps {
  playerState: PlayerState;
  controls: TouchControls;
  chunks: Map<string, WorldChunk>;
  onPlayerUpdate: (newState: Partial<PlayerState>) => void;
  onBlockBreak: (x: number, y: number, z: number) => void;
  onBlockPlace: (x: number, y: number, z: number) => void;
  worldGenerator: WorldGenerator;
  className?: string;
}

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π 3D –º–æ—Ç–æ—Ä –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
export function MinecraftEngine({
  playerState,
  controls,
  onPlayerUpdate,
  onBlockBreak,
  onBlockPlace,
  className = ''
}: MinecraftEngineProps) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
  const [cameraRotation, setCameraRotation] = useState<[number, number]>([0, 0]);
  const [isError, setIsError] = useState(false);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
  const handleMovement = useCallback((delta: number) => {
    try {
      if (!controls.moveStick || (controls.moveStick.x === 0 && controls.moveStick.y === 0)) return;
      
      const speed = controls.sprintPressed ? 5 : 3; // –±–ª–æ–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
      const moveDistance = speed * delta;
      
      // –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
      const newPosition: [number, number, number] = [
        playerState.position[0] + controls.moveStick.x * moveDistance,
        playerState.position[1] + (controls.jumpPressed ? 0.1 : controls.crouchPressed ? -0.05 : 0),
        playerState.position[2] + controls.moveStick.y * moveDistance
      ];
      
      onPlayerUpdate({
        position: newPosition,
        rotation: cameraRotation
      });
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è:', error);
    }
  }, [controls, playerState.position, cameraRotation, onPlayerUpdate]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –≤ useFrame
  useFrame((_, delta) => {
    handleMovement(delta);
  });

  const handleBlockClick = (x: number, y: number, z: number) => {
    if (controls.actionPressed) {
      onBlockBreak(x, y, z);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Three.js
  const handleError = useCallback((error: any) => {
    console.error('–û—à–∏–±–∫–∞ Three.js:', error);
    setIsError(true);
  }, []);

  if (isError) {
    return (
      <div className={`w-full h-full flex items-center justify-center bg-red-900 text-white ${className}`}>
        <div className="text-center p-4">
          <div className="text-2xl mb-4">‚ùå</div>
          <div className="text-lg mb-2">–û—à–∏–±–∫–∞ 3D –¥–≤–∏–∂–∫–∞</div>
          <button 
            onClick={() => setIsError(false)}
            className="bg-red-600 hover:bg-red-500 px-4 py-2 rounded"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`w-full h-full ${className}`}>
      <Canvas
        camera={{
          fov: 75,
          near: 0.1,
          far: 1000,
          position: [0, 10, 10]
        }}
        gl={{ 
          antialias: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          powerPreference: 'low-power', // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
          alpha: false, // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          depth: true,  // –í–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä –≥–ª—É–±–∏–Ω—ã
          stencil: false, // –û—Ç–∫–ª—é—á–∞–µ–º stencil –±—É—Ñ–µ—Ä –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          logarithmicDepthBuffer: false // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        }}
        dpr={[1, 1]} // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DPR –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        frameloop="always" // –í—Å–µ–≥–¥–∞ —Ä–µ–Ω–¥–µ—Ä–∏–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        shadows={false} // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–Ω–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      >
        <Suspense fallback={null}>
          <CameraController 
            controls={controls}
            playerPosition={playerState.position}
            onCameraChange={setCameraRotation}
          />
          
          {/* –û—Å–≤–µ—â–µ–Ω–∏–µ */}
          <ambientLight intensity={0.8} />
          <directionalLight 
            position={[10, 20, 10]} 
            intensity={0.5}
            castShadow={false}
          />
          
          {/* –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–µ–º–æ-–º–∏—Ä –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–∞–Ω–∫–æ–≤ */}
          <DemoChunk onBlockClick={handleBlockClick} />
          
          {/* –ò–≥—Ä–æ–∫ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Ç—Ä–µ—Ç—å–µ–º –ª–∏—Ü–µ) */}
          <Player position={playerState.position} />
          
          {/* –ù–µ–±–æ/–≥–æ—Ä–∏–∑–æ–Ω—Ç */}
          <Sphere args={[500]} position={[0, 0, 0]}>
            <meshBasicMaterial 
              color="#87CEEB" 
              side={THREE.BackSide} 
              fog={false}
            />
          </Sphere>
        </Suspense>
      </Canvas>
      
      {/* –ü—Ä–∏—Ü–µ–ª */}
      <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 pointer-events-none">
        <div className="w-4 h-4 border-2 border-white rounded-full opacity-60" />
      </div>
      
      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      <div className="absolute bottom-24 left-1/2 transform -translate-x-1/2 bg-black/50 text-white px-4 py-2 rounded-lg text-sm max-w-sm text-center">
        –î–µ–º–æ-—Ä–µ–∂–∏–º Minecraft. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∂–æ–π—Å—Ç–∏–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.
      </div>
    </div>
  );
}