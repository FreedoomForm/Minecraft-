{"extracted_information": "Подробная техническая информация о формате NBT (Named Binary Tag) Minecraft, включая его структуру данных, методы сериализации и десериализации, используемые алгоритмы сжатия и способы хранения метаданных блоков и сущностей.", "specifications": {"general": {"name": "Named Binary Tag (NBT)", "description": "Древовидная структура данных, используемая Minecraft в файлах сохранения для хранения произвольных данных. Состоит из 'тегов', каждый из которых имеет числовой ID типа, имя и полезную нагрузку.", "max_nesting_depth": 512}, "snbt_format": {"name": "Stringified Named Binary Tag (SNBT)", "description": "Строковое представление NBT, используемое в командах Java Edition. Представляет собой пары ключ-значение в фигурных скобках. Поддерживает иерархическую структуру.", "example": "{name1:123,name2:\"sometext1\",name3:{subname1:456,subname2:\"sometext2\"}}", "key_naming_rules": "Имя тега может быть заключено в двойные кавычки. Без кавычек, если содержит только 0-9, A-Z, a-z, _, -, ., +.", "number_representation": {"general": "Поддерживает десятичные, шестнадцатеричные (0x), двоичные (0b) числа. Допускаются '_' между цифрами, экспоненциальная запись (E notation), а также суффиксы знаковости ('u'/'U' для беззнаковых, 's'/'S' для знаковых).", "examples": ["-16b", "240uB", "0b10_01", "1_2.3_4__5f"]}, "string_representation": {"enclosure": "Строки заключаются в двойные (\") или одинарные (') кавычки (опционально для простых строк).", "escaping": "Поддерживает экранирующие последовательности (например, \\n, \\t, \\\\, \\\", \\') и Unicode последовательности (\\x*hh*, \\u*hhhh*, \\U*hhhhhhhh*, \\N{**})."}, "operations": [{"name": "bool(arg)", "description": "Преобразует числовое или булево значение в булево."}, {"name": "uuid(str)", "description": "Преобразует строковое UUID в целочисленный массив."}]}, "binary_format": {"file_type": "Файл NBT представляет собой сжатый тег Compound.", "tag_definition": "Состоит из байта ID типа тега, за которым следуют 2 байта длины имени (big-endian, ushort), затем имя в UTF-8. Полезная нагрузка следует за именем.", "root_tag": "Корневой тег всегда является Compound или (в Bedrock Edition) List. Часто имеет пустое имя.", "endianness": {"java_edition": "Big-endian (прямой порядок байтов).", "bedrock_edition": "Little-endian (обратный порядок байтов) для всех чисел."}}, "data_types_detailed": [{"id": 0, "tag_type": "TAG_End", "payload_description": "Отсутствует", "description": "Маркер конца тегов Compound и пустых тегов List.", "storage_capacity": "N/A"}, {"id": 1, "tag_type": "TAG_Byte", "payload_description": "1 байт / 8 бит, знаковый", "description": "Знаковое целое число, иногда используется для булевых значений.", "storage_capacity": "[-128, 127]"}, {"id": 2, "tag_type": "TAG_Short", "payload_description": "2 байта / 16 бит, знаковый, big-endian", "description": "Знаковое целое число.", "storage_capacity": "[-32,768, 32,767]"}, {"id": 3, "tag_type": "TAG_Int", "payload_description": "4 байта / 32 бита, знаковый, big-endian", "description": "Знаковое целое число.", "storage_capacity": "[-2,147,483,648, 2,147,483,647]"}, {"id": 4, "tag_type": "TAG_Long", "payload_description": "8 байт / 64 бита, знаковый, big-endian", "description": "Знаковое целое число.", "storage_capacity": "[-9,223,372,036,854,775,808, 9,223,372,036,854,775,807]"}, {"id": 5, "tag_type": "TAG_Float", "payload_description": "4 байта / 32 бита, знаковый, big-endian, IEEE 754-2008, binary32", "description": "Знаковое число с плавающей запятой.", "storage_capacity": "Макс. ~ ±3.4E38"}, {"id": 6, "tag_type": "TAG_Double", "payload_description": "8 байт / 64 бита, знаковый, big-endian, IEEE 754-2008, binary64", "description": "Знаковое число с плавающей запятой двойной точности.", "storage_capacity": "Макс. ~ ±1.79E308"}, {"id": 7, "tag_type": "TAG_Byte_Array", "payload_description": "4 байта (размер) + 'size' байт", "description": "Массив байтов.", "storage_capacity": "[2,147,483,639, 2,147,483,647] элементов"}, {"id": 8, "tag_type": "TAG_String", "payload_description": "2 байта (размер, беззнаковый) + 'size' байт UTF-8", "description": "Строка UTF-8.", "storage_capacity": "65,535 байт"}, {"id": 9, "tag_type": "TAG_List", "payload_description": "1 байт (ID типа содержимого) + 4 байта (размер, big-endian) + 'size' элементов", "description": "Список тегов с полезными нагрузками одного типа (гомогенный).", "storage_capacity": "[0, 2,147,483,639] элементов."}, {"id": 10, "tag_type": "TAG_Compound", "payload_description": "Любое количество тегов (ID, имя, полезная нагрузка), завершается TAG_End", "description": "Список полностью сформированных тегов. Имена тегов в одном Compound должны быть уникальными.", "storage_capacity": "Нет жесткого лимита на количество тегов."}, {"id": 11, "tag_type": "TAG_Int_Array", "payload_description": "4 байта (размер) + 'size' полезных нагрузок TAG_Int", "description": "Массив полезных нагрузок TAG_Int.", "storage_capacity": "[2,147,483,639, 2,147,483,647] элементов"}, {"id": 12, "tag_type": "TAG_Long_Array", "payload_description": "4 байта (размер) + 'size' полезных нагрузок TAG_Long", "description": "Массив полезных нагрузок TAG_Long.", "storage_capacity": "[2,147,483,639, 2,147,483,647] элементов"}]}, "features": {"data_serialization": {"overview": "NBT является форматом сериализации. Игровые объекты в памяти не хранятся в формате NBT. Игра генерирует NBT-объекты для сохранения или парсит SNBT для модификации объектов.", "stored_properties": "В NBT сохраняются свойства сущностей/блоков (например, расположение ресурсов преобразуется в строки). Имена атрибутов чувствительны к регистру.", "examples_of_stored_entities": ["Блоки-сущности (сундуки, печи)", "Предметы (в инвентаре, с зачарованиями, именами)", "Сущности-предметы (на земле)", "Мобы (криперы, коровы)", "Снаряды (стрелы, огненные шары)", "Транспортные средства (лодки, вагонетки)", "Динамические блоки (взрывающаяся TNT, падающий песок)", "Прочие сущности (фейерверки, картины)"]}, "nbt_json_conversion": {"nbt_to_json_mapping": {"string": "JsonString", "numeric_types": "JsonNumber", "arrays_and_lists": "JsonArray", "compound": "JsonObject"}, "json_to_nbt_mapping": {"json_string": "string", "json_boolean": "byte", "json_number": "Преобразуется в NBT-числовой тип (byte, short, int, long, float, double) в зависимости от диапазона и точности.", "json_null": "Не может быть преобразован.", "json_array": "Преобразуется в NBT-массив (byte/int/long) или List. Гетерогенные массивы JSON могут быть не преобразованы в NBT-массивы.", "json_object": "compound"}, "notes": "Преобразование из NBT в JSON может привести к потере информации и точности из-за различий в моделях данных."}}, "compression": {"default_compression": "Большинство NBT-файлов (например, level.dat, .dat-файлы, чанки) сжимаются с помощью GZip.", "other_compression": "Некоторые файлы могут быть несжатыми или сжатыми с помощью zlib (DEFLATE).", "uncompressed_examples": ["servers.dat (список сохраненных многопользовательских серверов)", "hotbar.nbt (сохраненные панели быстрого доступа)"], "bedrock_edition_specifics": "level.dat в Bedrock Edition — это несжатый NBT-файл с 8-байтовым заголовком."}, "temporal_info": {"history_highlights": [{"version": "Indev", "note": "Начальное использование тегов."}, {"version": "1.2.1 (12w07a)", "note": "Добавлены массивы целых чисел."}, {"version": "1.8 (14w03a)", "note": "Поддержка строковых ID в NBT-данных команд."}, {"version": "1.12 (17w18a)", "note": "Добавлены массивы длинных целых чисел."}, {"version": "1.13 (18w01a)", "note": "Добавлен генератор данных (конвертеры NBT) в клиент и сервер."}, {"version": "1.14 (19w08a)", "note": "SNBT: поддержка одинарных кавычек для строк и имен тегов."}, {"version": "1.16 (20w21a)", "note": "Добавлена функция преобразования между NBT и JSON."}, {"version": "1.21.5 (25w04a)", "note": "SNBT: поддержка гетерогенных списков, свободных числовых литералов, шестнадцатеричных/двоичных чисел, суффиксов знаковости, расширенных экранирующих последовательностей."}, {"version": "1.21.5 (25w10a)", "note": "SNBT: добавлены операции bool(arg) и uuid(string)."}]}, "geographical_data": {"java_edition_specifics": "Использует big-endian для бинарного формата.", "bedrock_edition_specifics": "Использует little-endian для всех числовых данных в бинарном формате; level.dat несжатый."}, "references": []}